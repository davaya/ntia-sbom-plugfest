package: "http://spdx.org/spdx-v2.2"
namespaces: {"ll": "http://spdx.org/license-list"}
exports: ["Document"]
config: {"$FieldName": "^[a-zA-Z][_A-Za-z0-9]{0,31}$", "$MaxElements": 1000}

Document = Record
  1 SPDXID Key(SPDX-Id)      // should be spdxId for consistency with all other property names
  2 spdxVersion String
  3 creationInfo CreationInfo
  4 name String
  5 dataLicense SpdxLicenseExpr
  6 hasExtractedLicensingInfos LicensingInfo [0..*]
  7 documentNamespace URI
  8 documentDescribes Link(SPDX-Id) [0..*]
  9 packages PackageInfo [0..*]
 10 files FileInfo [0..*]
 11 relationships Relationship [0..*]  // CONTAINS from Document permitted?

SpdxLicenseExpr = String   // String expression needs to be parsed to validate individual licenses

CreationInfo = Record
  1 comment String optional
  2 created String
  3 creators String [1..*]  // Should be Creator object, not imitation object String
  4 licenseListVersion String optional

LicensingInfo = Record
  1 licenseId SpdxLicenseExpr
  2 name String optional
  3 crossRefs CrossRef [0..*]
  4 extractedText String
  5 isDeprecatedLicenseId Boolean optional
  6 isFsfLibre Boolean optional
  7 isOsiApproved Boolean optional
  8 licenseText String optional
  9 licenseTextHtml String optional
 10 standardLicenseHeader String optional
 11 standardLicenseHeaderHtml String optional
 12 standardLicenseHeaderTemplate String optional
 13 standardLicenseTemplate String optional

CrossRef = Record
  1 isLive Boolean
  2 isValid Boolean
  3 isWayBackLink Boolean
  4 match String   // Should be Boolean true, not String "true"
  5 order Integer
  6 timestamp Timestamp
  7 url URI

PackageInfo = Record
  1 SPDXID Key(SPDX-Id)
  2 hasFiles SPDX-Id [0..*]
  3 name String
  4 versionInfo Version optional
  5 sourceInfo String optional
  6 filesAnalyzed Boolean optional
  7 homepage URI optional
  8 downloadLocation String optional // Should be URI
  9 comment String optional
 10 licenseComments String optional
 11 licenseConcluded SpdxLicenseExpr optional
 12 licenseDeclared String optional // "NOASSERTION" is not a URI, should be omitted
 13 licenseInfoFromFiles String [0..*]
 14 copyrightText String optional
 15 annotations Annotation [0..*]
 16 checksums Checksum [0..*]
 17 externalRefs ExternalRef [0..*]
 18 description String optional
 19 originator String optional
 20 packageFileName String optional
 21 packageVerificationCode PackageVerificationCode optional
 22 summary String optional
 23 supplier String optional

PackageVerificationCode = Record
  1 packageVerificationCodeValue String

ExternalRef = Record
  1 referenceCategory ReferenceCategory
  2 referenceLocator URI
  3 referenceType URI

FileInfo = Record
  1 SPDXID Key(SPDX-Id)
  2 fileName String
  3 fileTypes FileType [0..*]
  4 versionInfo Version optional
  5 comment String optional
  6 licenseComments String optional
  7 licenseConcluded SpdxLicenseExpr optional
  8 licenseDeclared String optional
  9 licenseInfoInFiles String [0..*]
 10 copyrightText String optional
 11 noticeText String optional
 12 checksums Checksum [0..*]
 13 externalRefs ExternalRef [0..*]

Relationship = Record
  1 spdxElementId Key(SPDX-Id)
  2 relatedSpdxElement SPDX-Id    // Overloaded multiple targets: Document, PackageInfo, FileInfo
  3 relationshipType RelationshipType

RelatedElement = Choice
  1 document Link(Document)
  2 package Link(PackageInfo)
  3 file Link(FileInfo)

RelationshipType = Enumerated
  1 DESCRIBES
  2 CONTAINS
  3 CONTAINED_BY    // Must be symmetric with CONTAINS. Redundant and potentially inconsistent
  4 DEPENDS_ON
  5 BUILD_TOOL_OF
  6 GENERATED_FROM

Annotation = Record
  1 annotationDate Timestamp
  2 annotationType AnnotationType
  3 annotator String // use real object: Person, ...
  4 comment String

AnnotationType = Enumerated
  1 OTHER

ReferenceCategory = Enumerated
  1 SECURITY
  2 PACKAGE_MANAGER

Checksum = Record
  1 algorithm HashAlgorithm
  2 checksumValue String

HashAlgorithm = Enumerated
  1 MD5
  2 SHA1

FileType = Enumerated
  1 APPLICATION
  2 SOURCE
  3 BINARY
  4 SHARED
  5 OTHER

Timestamp = String

URI = String /uri

Version = String

SPDX-Id = String{pattern="^SPDXRef-[-_+.a-zA-Z0-9]+$"}
